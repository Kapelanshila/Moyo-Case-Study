// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineOrderAPI.Models;

#nullable disable

namespace OnlineOrderAPI.Migrations
{
    [DbContext(typeof(OnlineOrderDBContext))]
    [Migration("20230722174809_IntialMingration")]
    partial class IntialMingration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineOrderAPI.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.OrderLine", b =>
                {
                    b.Property<int>("OrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderLineID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            Price = 14000.0,
                            ProductName = "Apple iPhone 13 Pro",
                            Stock = 50
                        },
                        new
                        {
                            ProductID = 2,
                            Price = 11000.0,
                            ProductName = "Samsung Galaxy S21 Ultra",
                            Stock = 60
                        },
                        new
                        {
                            ProductID = 3,
                            Price = 9000.0,
                            ProductName = "Google Pixel 6 Pro",
                            Stock = 40
                        },
                        new
                        {
                            ProductID = 4,
                            Price = 8500.0,
                            ProductName = "OnePlus 9 Pro",
                            Stock = 30
                        },
                        new
                        {
                            ProductID = 5,
                            Price = 6750.0,
                            ProductName = "Xiaomi Mi 11",
                            Stock = 35
                        },
                        new
                        {
                            ProductID = 6,
                            Price = 21000.0,
                            ProductName = "Apple MacBook Pro 16",
                            Stock = 25
                        },
                        new
                        {
                            ProductID = 7,
                            Price = 22000.0,
                            ProductName = "Dell XPS 17",
                            Stock = 20
                        },
                        new
                        {
                            ProductID = 8,
                            Price = 17650.0,
                            ProductName = "HP Spectre x360 15",
                            Stock = 15
                        },
                        new
                        {
                            ProductID = 9,
                            Price = 9000.0,
                            ProductName = "Lenovo ThinkPad X1 Carbon Gen 9",
                            Stock = 18
                        },
                        new
                        {
                            ProductID = 10,
                            Price = 18950.0,
                            ProductName = "Asus ROG Zephyrus G14",
                            Stock = 22
                        });
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Password_Hashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            Description = "Client"
                        },
                        new
                        {
                            UserRoleID = 2,
                            Description = "Vendor"
                        });
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.OrderLine", b =>
                {
                    b.HasOne("OnlineOrderAPI.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineOrderAPI.Models.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineOrderAPI.Models.User", "User")
                        .WithMany("OrderLines")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.User", b =>
                {
                    b.HasOne("OnlineOrderAPI.Models.UserRole", null)
                        .WithMany("Users")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.Product", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.User", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("OnlineOrderAPI.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
